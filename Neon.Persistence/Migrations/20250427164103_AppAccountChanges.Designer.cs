// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Neon.Persistence.NeonContext;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Neon.Persistence.Migrations
{
    [DbContext(typeof(NeonDbContext))]
    [Migration("20250427164103_AppAccountChanges")]
    partial class AppAccountChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Neon.Persistence.EntityModels.Twitch.AppAccount", b =>
                {
                    b.Property<Guid>("AppAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("app_account_id")
                        .HasColumnOrder(1);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("access_token");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("app_name");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("client_secret");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(2);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modified_by")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date")
                        .HasColumnOrder(4);

                    b.Property<string>("RedirectUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("redirect_uri");

                    b.HasKey("AppAccountId")
                        .HasName("pk_app_account");

                    b.HasIndex("AppName")
                        .HasDatabaseName("ix_app_account_app_name");

                    b.ToTable("app_account", "twitch");
                });

            modelBuilder.Entity("Neon.Persistence.EntityModels.Twitch.TwitchAccount", b =>
                {
                    b.Property<Guid>("TwitchAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("twitch_account_id")
                        .HasColumnOrder(1);

                    b.Property<string>("AccessToken")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("access_token");

                    b.Property<DateTime?>("AccessTokenRefreshDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("access_token_refresh_date");

                    b.Property<DateTime>("AccountCreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("account_created_date");

                    b.Property<string>("AuthorizationCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("authorization_code");

                    b.Property<string>("AuthorizationScopes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("authorization_scopes");

                    b.Property<string>("BroadcasterId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("broadcaster_id");

                    b.Property<string>("BroadcasterType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("broadcaster_type");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(2);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("display_name");

                    b.Property<bool?>("IsAuthorizationRevoked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_authorization_revoked");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login_name");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modified_by")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("NeonAuthorizationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("neon_authorization_date");

                    b.Property<DateTime?>("NeonAuthorizationRevokeDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("neon_authorization_revoke_date");

                    b.Property<string>("OfflineImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("offline_image_url");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("profile_image_url");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("refresh_token");

                    b.Property<string>("Type")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("type");

                    b.Property<string>("WebSocketChatUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("web_socket_chat_url");

                    b.HasKey("TwitchAccountId")
                        .HasName("pk_twitch_account");

                    b.ToTable("twitch_account", "twitch");
                });
#pragma warning restore 612, 618
        }
    }
}
