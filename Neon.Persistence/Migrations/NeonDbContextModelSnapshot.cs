// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Neon.Persistence.NeonContext;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Neon.Persistence.Migrations
{
    [DbContext(typeof(NeonDbContext))]
    partial class NeonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Neon.Persistence.EntityModels.Twitch.AppAccount", b =>
                {
                    b.Property<Guid>("AppAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("app_account_id")
                        .HasColumnOrder(1);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("access_token");

                    b.Property<string>("AccessTokenIv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("access_token_iv");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("app_name");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("client_secret");

                    b.Property<string>("ClientSecretIv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("client_secret_iv");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(2);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modified_by")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date")
                        .HasColumnOrder(4);

                    b.Property<string>("RedirectUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("redirect_uri");

                    b.HasKey("AppAccountId")
                        .HasName("pk_app_account");

                    b.HasIndex("AppName")
                        .HasDatabaseName("ix_app_account_app_name");

                    b.ToTable("app_account", "twitch");
                });

            modelBuilder.Entity("Neon.Persistence.EntityModels.Twitch.AuthorizationScope", b =>
                {
                    b.Property<Guid>("AuthorizationScopeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("authorization_scope_id")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(2);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modified_by")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("AuthorizationScopeId")
                        .HasName("pk_authorization_scope");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_authorization_scope_name");

                    b.ToTable("authorization_scope", "twitch");
                });

            modelBuilder.Entity("Neon.Persistence.EntityModels.Twitch.AuthorizationScopeSubscriptionType", b =>
                {
                    b.Property<Guid>("AuthorizationScopeId")
                        .HasColumnType("uuid")
                        .HasColumnName("authorization_scope_id")
                        .HasColumnOrder(1);

                    b.Property<Guid>("SubscriptionTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_type_id")
                        .HasColumnOrder(2);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(3);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modified_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date")
                        .HasColumnOrder(5);

                    b.HasKey("AuthorizationScopeId", "SubscriptionTypeId")
                        .HasName("pk_authorization_scope_subscription_type");

                    b.HasIndex("SubscriptionTypeId")
                        .HasDatabaseName("ix_authorization_scope_subscription_type_subscription_type_id");

                    b.ToTable("authorization_scope_subscription_type", "twitch");
                });

            modelBuilder.Entity("Neon.Persistence.EntityModels.Twitch.SubscriptionType", b =>
                {
                    b.Property<Guid>("SubscriptionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_type_id")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(2);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modified_by")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("version");

                    b.HasKey("SubscriptionTypeId")
                        .HasName("pk_subscription_type");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_subscription_type_name");

                    b.ToTable("subscription_type", "twitch");
                });

            modelBuilder.Entity("Neon.Persistence.EntityModels.Twitch.TwitchAccount", b =>
                {
                    b.Property<Guid>("TwitchAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("twitch_account_id")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("AccountCreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("account_created_date");

                    b.Property<string>("BroadcasterId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("broadcaster_id");

                    b.Property<string>("BroadcasterType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("broadcaster_type");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(2);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("display_name");

                    b.Property<bool?>("IsAuthorizationRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_authorization_revoked");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login_name");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modified_by")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("NeonAuthorizationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("neon_authorization_date");

                    b.Property<DateTime?>("NeonAuthorizationRevokeDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("neon_authorization_revoke_date");

                    b.Property<string>("OfflineImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("offline_image_url");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("profile_image_url");

                    b.Property<string>("Type")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("type");

                    b.HasKey("TwitchAccountId")
                        .HasName("pk_twitch_account");

                    b.HasIndex("BroadcasterId")
                        .HasDatabaseName("ix_twitch_account_broadcaster_id");

                    b.HasIndex("LoginName")
                        .HasDatabaseName("ix_twitch_account_login_name");

                    b.ToTable("twitch_account", "twitch");
                });

            modelBuilder.Entity("Neon.Persistence.EntityModels.Twitch.TwitchAccountAuth", b =>
                {
                    b.Property<Guid>("TwitchAccountAuthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("twitch_account_auth_id")
                        .HasColumnOrder(1);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("access_token");

                    b.Property<string>("AccessTokenIv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("access_token_iv");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<DateTime?>("LastRefreshDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_refresh_date");

                    b.Property<DateTime?>("LastValidationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_validation_date");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modified_by")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date")
                        .HasColumnOrder(4);

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("refresh_token");

                    b.Property<string>("RefreshTokenIv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("refresh_token_iv");

                    b.Property<Guid>("TwitchAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("twitch_account_id");

                    b.HasKey("TwitchAccountAuthId")
                        .HasName("pk_twitch_account_auth");

                    b.HasIndex("TwitchAccountId")
                        .IsUnique()
                        .HasDatabaseName("ix_twitch_account_auth_twitch_account_id");

                    b.ToTable("twitch_account_auth", "twitch");
                });

            modelBuilder.Entity("Neon.Persistence.EntityModels.Twitch.TwitchAccountScope", b =>
                {
                    b.Property<Guid>("TwitchAccountScopeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("twitch_account_scope_id")
                        .HasColumnOrder(1);

                    b.Property<Guid>("AuthorizationScopeId")
                        .HasColumnType("uuid")
                        .HasColumnName("authorization_scope_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(2);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modified_by")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date")
                        .HasColumnOrder(4);

                    b.Property<Guid>("TwitchAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("twitch_account_id");

                    b.HasKey("TwitchAccountScopeId")
                        .HasName("pk_twitch_account_scope");

                    b.HasIndex("AuthorizationScopeId")
                        .HasDatabaseName("ix_twitch_account_scope_authorization_scope_id");

                    b.HasIndex("TwitchAccountId")
                        .HasDatabaseName("ix_twitch_account_scope_twitch_account_id");

                    b.ToTable("twitch_account_scope", "twitch");
                });

            modelBuilder.Entity("Neon.Persistence.EntityModels.Twitch.AuthorizationScopeSubscriptionType", b =>
                {
                    b.HasOne("Neon.Persistence.EntityModels.Twitch.AuthorizationScope", "AuthorizationScope")
                        .WithMany("AuthorizationScopeSubscriptionTypes")
                        .HasForeignKey("AuthorizationScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_authorization_scope_subscription_type_authorization_scope_a");

                    b.HasOne("Neon.Persistence.EntityModels.Twitch.SubscriptionType", "SubscriptionType")
                        .WithMany("AuthorizationScopeSubscriptionTypes")
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_authorization_scope_subscription_type_subscription_type_sub");

                    b.Navigation("AuthorizationScope");

                    b.Navigation("SubscriptionType");
                });

            modelBuilder.Entity("Neon.Persistence.EntityModels.Twitch.TwitchAccountAuth", b =>
                {
                    b.HasOne("Neon.Persistence.EntityModels.Twitch.TwitchAccount", "TwitchAccount")
                        .WithOne("TwitchAccountAuth")
                        .HasForeignKey("Neon.Persistence.EntityModels.Twitch.TwitchAccountAuth", "TwitchAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_twitch_account_auth_twitch_account_twitch_account_id");

                    b.Navigation("TwitchAccount");
                });

            modelBuilder.Entity("Neon.Persistence.EntityModels.Twitch.TwitchAccountScope", b =>
                {
                    b.HasOne("Neon.Persistence.EntityModels.Twitch.AuthorizationScope", "AuthorizationScope")
                        .WithMany("TwitchAccountScopes")
                        .HasForeignKey("AuthorizationScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_twitch_account_scope_authorization_scope_authorization_scop");

                    b.HasOne("Neon.Persistence.EntityModels.Twitch.TwitchAccount", "TwitchAccount")
                        .WithMany("TwitchAccountScopes")
                        .HasForeignKey("TwitchAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_twitch_account_scope_twitch_account_twitch_account_id");

                    b.Navigation("AuthorizationScope");

                    b.Navigation("TwitchAccount");
                });

            modelBuilder.Entity("Neon.Persistence.EntityModels.Twitch.AuthorizationScope", b =>
                {
                    b.Navigation("AuthorizationScopeSubscriptionTypes");

                    b.Navigation("TwitchAccountScopes");
                });

            modelBuilder.Entity("Neon.Persistence.EntityModels.Twitch.SubscriptionType", b =>
                {
                    b.Navigation("AuthorizationScopeSubscriptionTypes");
                });

            modelBuilder.Entity("Neon.Persistence.EntityModels.Twitch.TwitchAccount", b =>
                {
                    b.Navigation("TwitchAccountAuth");

                    b.Navigation("TwitchAccountScopes");
                });
#pragma warning restore 612, 618
        }
    }
}
