x-variables:
  base_app_path: "C:/Users/nickb/Documents/Coding/Projects/Neon"

services:
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CLUSTER_ID: local
    ports:
      - "9092:9092"
    volumes:
      - kafka:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - neon_network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    ports:
      - "8080:8080"
    volumes:
      - kafka-ui:/var/lib/kafka-ui/data
    networks:
      - neon_network

  postgres:
    image: postgres:latest
    container_name: postgres
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - neon_network
  
  pg-admin:
    image: dpage/pgadmin4:latest
    container_name: pg-admin
    environment:
      PGADMIN_DEFAULT_EMAIL: iflynick@gmail.com
      PGADMIN_DEFAULT_PASSWORD: iflynick
    ports:
      - "5050:80"
    volumes:
      - pg-admin:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - neon_network
  
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - neon_network

  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    ports:
      - "5540:5540"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - neon_network
        
  twitch-service:
    build:
      context: ../../
      dockerfile: ./Neon.TwitchService/Dockerfile
    container_name: twitch-service
    environment:
      - DOTNET_ENVIRONMENT=Development
      - ConnectionStrings__NeonDb=Host=postgres;Port=5432;User Id=postgres;Password=postgres;Database=Neon
      - BaseKafkaConfig__BootstrapServers=kafka:29092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - neon_network

  emote-service:
    build:
      context: ../../
      dockerfile: ./Neon.Emotes.Api/Dockerfile
    container_name: emote-service
    environment:
      - DOTNET_ENVIRONMENT=Development
      - ConnectionStrings__NeonDb=Host=postgres;Port=5432;User Id=postgres;Password=postgres;Database=Neon
      - ConnectionStrings__Redis=redis:6379
    ports:
      - "5001:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - neon_network

volumes:
  postgres:
  kafka:
  kafka-ui:
  pg-admin:
  redis-data:

networks:
  neon_network:
    driver: bridge